{"ast":null,"code":"import _defineProperty from \"/Users/cckn/ws/todoapp/todoApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/cckn/ws/todoapp/todoApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/cckn/ws/todoapp/todoApp/src/App.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useRef, useCallback } from 'react';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoInsert from './components/TodoInsert';\nimport TodoList from './components/TodoList';\n\nconst App = () => {\n  const initialTodos = [{\n    id: 1,\n    text: 'todo1 ',\n    checked: true\n  }, {\n    id: 2,\n    text: 'todo2 ',\n    checked: false\n  }, {\n    id: 3,\n    text: 'todo3 ',\n    checked: true\n  }];\n\n  const _useState = useState(initialTodos),\n        _useState2 = _slicedToArray(_useState, 2),\n        todos = _useState2[0],\n        setTodos = _useState2[1];\n\n  const nextId = useRef(4);\n  const onInsert = useCallback(text => {\n    const todo = {\n      id: nextId.current,\n      text,\n      checked: false\n    };\n    setTodos(todos.concat(todo));\n    nextId.current += 1;\n  }, [todos]);\n  const onRemove = useCallback(id => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }, [todos]);\n  const onToggle = useCallback(id => {\n    setTodos(todos.map(todo => {\n      if (todo.id === id) {\n        return _objectSpread({}, todo, {\n          checked: !todo.checked\n        });\n      }\n\n      return todo;\n    }));\n  }, [todos]);\n  return React.createElement(TodoTemplate, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(TodoInsert, {\n    onInsert: onInsert,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(TodoList, {\n    todos: todos,\n    onRemove: onRemove,\n    onToggle: onToggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/cckn/ws/todoapp/todoApp/src/App.tsx"],"names":["React","useState","useRef","useCallback","TodoTemplate","TodoInsert","TodoList","App","initialTodos","id","text","checked","todos","setTodos","nextId","onInsert","todo","current","concat","onRemove","filter","onToggle","map"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,WAAlC,QAAqD,OAArD;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,QAAP,MAAqB,uBAArB;;AAGA,MAAMC,GAAa,GAAG,MAAM;AAC1B,QAAMC,YAAqB,GAAG,CAC5B;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,QAAf;AAAyBC,IAAAA,OAAO,EAAE;AAAlC,GAD4B,EAE5B;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,QAAf;AAAyBC,IAAAA,OAAO,EAAE;AAAlC,GAF4B,EAG5B;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,QAAf;AAAyBC,IAAAA,OAAO,EAAE;AAAlC,GAH4B,CAA9B;;AAD0B,oBAMAV,QAAQ,CAACO,YAAD,CANR;AAAA;AAAA,QAMnBI,KANmB;AAAA,QAMZC,QANY;;AAQ1B,QAAMC,MAAM,GAAGZ,MAAM,CAAC,CAAD,CAArB;AACA,QAAMa,QAAkB,GAAGZ,WAAW,CACnCO,IAAD,IAAkB;AAChB,UAAMM,IAAW,GAAG;AAClBP,MAAAA,EAAE,EAAEK,MAAM,CAACG,OADO;AAElBP,MAAAA,IAFkB;AAGlBC,MAAAA,OAAO,EAAE;AAHS,KAApB;AAKAE,IAAAA,QAAQ,CAACD,KAAK,CAACM,MAAN,CAAaF,IAAb,CAAD,CAAR;AACAF,IAAAA,MAAM,CAACG,OAAP,IAAkB,CAAlB;AACD,GATmC,EAUpC,CAACL,KAAD,CAVoC,CAAtC;AAaA,QAAMO,QAAkB,GAAGhB,WAAW,CACnCM,EAAD,IAAgB;AACdI,IAAAA,QAAQ,CAACD,KAAK,CAACQ,MAAN,CAAcJ,IAAD,IAAUA,IAAI,CAACP,EAAL,KAAYA,EAAnC,CAAD,CAAR;AACD,GAHmC,EAIpC,CAACG,KAAD,CAJoC,CAAtC;AAOA,QAAMS,QAAkB,GAAGlB,WAAW,CACnCM,EAAD,IAAgB;AACdI,IAAAA,QAAQ,CACND,KAAK,CAACU,GAAN,CAAWN,IAAD,IAAU;AAClB,UAAIA,IAAI,CAACP,EAAL,KAAYA,EAAhB,EAAoB;AAClB,iCAAYO,IAAZ;AAAkBL,UAAAA,OAAO,EAAE,CAACK,IAAI,CAACL;AAAjC;AACD;;AACD,aAAOK,IAAP;AACD,KALD,CADM,CAAR;AAQD,GAVmC,EAWpC,CAACJ,KAAD,CAXoC,CAAtC;AAcA,SACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,QAAQ,EAAEG,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,QAAD;AACE,IAAA,KAAK,EAAEH,KADT;AAEE,IAAA,QAAQ,EAAEO,QAFZ;AAGE,IAAA,QAAQ,EAAEE,QAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAUD,CArDD;;AAuDA,eAAed,GAAf","sourcesContent":["import React, { useState, useRef, useCallback } from 'react'\nimport TodoTemplate from './components/TodoTemplate'\nimport TodoInsert from './components/TodoInsert'\nimport TodoList from './components/TodoList'\nimport { ITodo, OnRemove, OnInsert, OnToggle } from './components/types'\n\nconst App: React.FC = () => {\n  const initialTodos: ITodo[] = [\n    { id: 1, text: 'todo1 ', checked: true },\n    { id: 2, text: 'todo2 ', checked: false },\n    { id: 3, text: 'todo3 ', checked: true },\n  ]\n  const [todos, setTodos] = useState(initialTodos)\n\n  const nextId = useRef(4)\n  const onInsert: OnInsert = useCallback(\n    (text: string) => {\n      const todo: ITodo = {\n        id: nextId.current,\n        text,\n        checked: false,\n      }\n      setTodos(todos.concat(todo))\n      nextId.current += 1\n    },\n    [todos],\n  )\n\n  const onRemove: OnRemove = useCallback(\n    (id: number) => {\n      setTodos(todos.filter((todo) => todo.id !== id))\n    },\n    [todos],\n  )\n\n  const onToggle: OnToggle = useCallback(\n    (id: number) => {\n      setTodos(\n        todos.map((todo) => {\n          if (todo.id === id) {\n            return { ...todo, checked: !todo.checked }\n          }\n          return todo\n        }),\n      )\n    },\n    [todos],\n  )\n\n  return (\n    <TodoTemplate>\n      <TodoInsert onInsert={onInsert} />\n      <TodoList\n        todos={todos}\n        onRemove={onRemove}\n        onToggle={onToggle}\n      ></TodoList>\n    </TodoTemplate>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}